name: Build
on:
  repository_dispatch:
    types: [build_artifacts]
env:
  DOCKER_BUILDKIT: 1
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
jobs:
  build:
    name: Build and upload artifacts
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.sha }}

      - name: Configure AWS credentials for utility account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up SSH agent
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.ARTIFACTORY_DIST_KEY }}"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64
          server-id: oph-sade-artifactory
          server-username: ARTIFACTORY_USERNAME
          server-password: ARTIFACTORY_PASSWORD

      - name: Build and upload to Artifactory
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: make dist version=${{ github.event.client_payload.sha }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: koski
          IMAGE_TAG: ${{ github.event.client_payload.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg KOSKI_VERSION=$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  trigger_deploy:
    name: Send repository dispatch event to start deployment
    needs: [build]
    if: success()
    runs-on: ubuntu-20.04
    steps:
      - name: Send dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: deploy
          client-payload: '{"sha": "${{ github.sha }}"}'
