name: Test, build and deploy master
on:
  push:
    branches:
      - master
env:
  DOCKER_BUILDKIT: 1
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  TZ: Europe/Helsinki


jobs:
  lint_koski:
    name: Lint Koski scala and frontend code
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run linter
        run: |
          cd web
          npm ci
          cd ..
          make lint

  run_backend_tests:
    name: Run Koski backend tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run backend tests
        run: mvn test

  run_frontend_tests_0:
    name: Run Koski frontend tests runner 0
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run frontend tests
        run: mvn test -Pmocharunner -Dsuites="fi.oph.koski.mocha.KoskiMochaSpecRunner0"

  run_frontend_tests_1:
    name: Run Koski frontend tests runner 1
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run frontend tests
        run: mvn test -Pmocharunner -Dsuites="fi.oph.koski.mocha.KoskiMochaSpecRunner1"

  run_frontend_tests_2:
    name: Run Koski frontend tests runner 2
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run frontend tests
        run: mvn test -Pmocharunner -Dsuites="fi.oph.koski.mocha.KoskiMochaSpecRunner2"

  run_frontend_tests_3:
    name: Run Koski frontend tests runner 3
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run frontend tests
        run: mvn test -Pmocharunner -Dsuites="fi.oph.koski.mocha.KoskiMochaSpecRunner3"

  run_frontend_tests_4:
    name: Run Koski frontend tests runner 4
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run frontend tests
        run: mvn test -Pmocharunner -Dsuites="fi.oph.koski.mocha.KoskiMochaSpecRunner4"

  valpas_integration_tests:
    name: Valpas integration tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up Java 8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Configure sysctl limits for Elasticsearch
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144

      - name: Start Postgres and ES containers
        run: docker-compose up -d

      - name: Run tests
        run: |
          cd valpas-web
          npm ci
          cd ..
          make valpas-fronttest

  valpas_frontend_unit_tests:
    name: Valpas frontend unit tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run linter and tests
        run: |
          cd valpas-web
          npm ci
          npm run lint
          npm run test:unit

  build:
    name: Build and upload artifacts
    needs:
      [
        lint_koski,
        run_backend_tests,
        run_frontend_tests_0,
        run_frontend_tests_1,
        run_frontend_tests_2,
        run_frontend_tests_3,
        run_frontend_tests_4,
        valpas_integration_tests,
        valpas_frontend_unit_tests,
      ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials for utility account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up SSH agent
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.ARTIFACTORY_DIST_KEY }}"

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: x64
          server-id: oph-sade-artifactory
          server-username: ARTIFACTORY_USERNAME
          server-password: ARTIFACTORY_PASSWORD

      - name: Build and upload to Artifactory
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: make dist version=${{ github.sha }}

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: koski
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg KOSKI_VERSION=$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_dev:
    name: Deploy to dev environment
    environment:
      name: dev
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials for utility account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Switch role to dev environment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE }}
          role-duration-seconds: 3600
          role-session-name: KoskiDeployment-${{ github.sha }}

      - name: Get task definition ARN
        id: get-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: KoskiContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Get AppSpec template
        run: |
          aws ssm get-parameter --name /koski/appspec-template --output text --query 'Parameter.Value' > appspec.json

      - name: Get Valpas bucket name
        id: get-valpas-bucket
        run: |
          echo "::set-output name=bucket-name::$(aws ssm get-parameter --name /valpas/bucket-name --output text --query 'Parameter.Value')"

      - name: Deploy using CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: koski
          cluster: koski-cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: koski
          codedeploy-deployment-group: koski-deployment-group

      - name: Deploy Valpas frontend
        id: valpas-deploy
        env:
          ARTIFACTORY_URL_PREFIX: https://artifactory.opintopolku.fi/artifactory/oph-sade-release-local/fi/vm/sade/koski
        run: |
          curl -s -S -f -L $ARTIFACTORY_URL_PREFIX/${{ github.sha }}/koski-${{ github.sha }}.war | jar -x
          aws s3 sync VALPAS-WEB s3://${{ steps.get-valpas-bucket.outputs.bucket-name }}/valpas --exclude index.html --delete
          aws s3 cp VALPAS-WEB/index.html s3://${{ steps.get-valpas-bucket.outputs.bucket-name }}/valpas/index.html --metadata-directive REPLACE --cache-control max-age=0
          distribution_id=$(aws ssm get-parameter --name /valpas/cloudfront-distribution-id --query Parameter.Value --output text)
          invalidation_id=$(aws cloudfront create-invalidation --distribution-id $distribution_id --paths '/valpas/*' --query Invalidation.Id --output text)
          aws cloudfront wait invalidation-completed --distribution-id $distribution_id --id $invalidation_id

      - name: Get raportointikanta loader task definition ARN
        id: get-raportointikanta-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/raportointikanta/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-raportointikanta-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > raportointikanta-task-definition.json

      - name: Render Amazon ECS task definition
        id: raportointikanta-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: raportointikanta-task-definition.json
          container-name: RaportointikantaContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        id: raportointikanta-taskdef-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.raportointikanta-task-def.outputs.task-definition }}
          cluster: koski-cluster

      - name: Write task definition ARN to parameter store
        env:
          TASKDEF_ARN: ${{ steps.raportointikanta-taskdef-deploy.outputs.task-definition-arn }}
        run: aws ssm put-parameter --overwrite --name /koski/raportointikanta/task-definition --type String --value ${TASKDEF_ARN}

  deploy_qa:
    name: Deploy to qa environment
    environment:
      name: qa
    needs: [deploy_dev]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials for utility account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Switch role to qa environment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE }}
          role-duration-seconds: 3600
          role-session-name: KoskiDeployment-${{ github.sha }}

      - name: Get task definition ARN
        id: get-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: KoskiContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Get AppSpec template
        run: |
          aws ssm get-parameter --name /koski/appspec-template --output text --query 'Parameter.Value' > appspec.json

      - name: Get Valpas bucket name
        id: get-valpas-bucket
        run: |
          echo "::set-output name=bucket-name::$(aws ssm get-parameter --name /valpas/bucket-name --output text --query 'Parameter.Value')"

      - name: Deploy using CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: koski
          cluster: koski-cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: koski
          codedeploy-deployment-group: koski-deployment-group

      - name: Deploy Valpas frontend
        id: valpas-deploy
        env:
          ARTIFACTORY_URL_PREFIX: https://artifactory.opintopolku.fi/artifactory/oph-sade-release-local/fi/vm/sade/koski
        run: |
          curl -s -S -f -L $ARTIFACTORY_URL_PREFIX/${{ github.sha }}/koski-${{ github.sha }}.war | jar -x
          aws s3 sync VALPAS-WEB s3://${{ steps.get-valpas-bucket.outputs.bucket-name }}/valpas --delete
          distribution_id=$(aws ssm get-parameter --name /valpas/cloudfront-distribution-id --query Parameter.Value --output text)
          invalidation_id=$(aws cloudfront create-invalidation --distribution-id $distribution_id --paths '/valpas/*' --query Invalidation.Id --output text)
          aws cloudfront wait invalidation-completed --distribution-id $distribution_id --id $invalidation_id

      - name: Get raportointikanta loader task definition ARN
        id: get-raportointikanta-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/raportointikanta/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-raportointikanta-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > raportointikanta-task-definition.json

      - name: Render Amazon ECS task definition
        id: raportointikanta-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: raportointikanta-task-definition.json
          container-name: RaportointikantaContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        id: raportointikanta-taskdef-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.raportointikanta-task-def.outputs.task-definition }}
          cluster: koski-cluster

      - name: Write task definition ARN to parameter store
        env:
          TASKDEF_ARN: ${{ steps.raportointikanta-taskdef-deploy.outputs.task-definition-arn }}
        run: aws ssm put-parameter --overwrite --name /koski/raportointikanta/task-definition --type String --value ${TASKDEF_ARN}

  deploy_prod:
    name: Deploy to prod environment
    environment:
      name: prod
    needs: [deploy_qa]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials for utility account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Switch role to prod environment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.DEPLOYMENT_ROLE }}
          role-duration-seconds: 3600
          role-session-name: KoskiDeployment-${{ github.sha }}

      - name: Get task definition ARN
        id: get-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > task-definition.json

      - name: Render Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: KoskiContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Get AppSpec template
        run: |
          aws ssm get-parameter --name /koski/appspec-template --output text --query 'Parameter.Value' > appspec.json

      - name: Get Valpas bucket name
        id: get-valpas-bucket
        run: |
          echo "::set-output name=bucket-name::$(aws ssm get-parameter --name /valpas/bucket-name --output text --query 'Parameter.Value')"

      - name: Deploy using CodeDeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: koski
          cluster: koski-cluster
          wait-for-service-stability: true
          codedeploy-appspec: appspec.json
          codedeploy-application: koski
          codedeploy-deployment-group: koski-deployment-group

      - name: Deploy Valpas frontend
        id: valpas-deploy
        env:
          ARTIFACTORY_URL_PREFIX: https://artifactory.opintopolku.fi/artifactory/oph-sade-release-local/fi/vm/sade/koski
        run: |
          curl -s -S -f -L $ARTIFACTORY_URL_PREFIX/${{ github.sha }}/koski-${{ github.sha }}.war | jar -x
          aws s3 sync VALPAS-WEB s3://${{ steps.get-valpas-bucket.outputs.bucket-name }}/valpas --delete
          distribution_id=$(aws ssm get-parameter --name /valpas/cloudfront-distribution-id --query Parameter.Value --output text)
          invalidation_id=$(aws cloudfront create-invalidation --distribution-id $distribution_id --paths '/valpas/*' --query Invalidation.Id --output text)
          aws cloudfront wait invalidation-completed --distribution-id $distribution_id --id $invalidation_id

      - name: Get raportointikanta loader task definition ARN
        id: get-raportointikanta-taskdef-arn
        run: |
          echo "::set-output name=taskdef-arn::$(aws ssm get-parameter --name /koski/raportointikanta/task-definition-skeleton --output text --query 'Parameter.Value')"

      - name: Get task definition skeleton
        run: |
          aws ecs describe-task-definition --task-definition ${{ steps.get-raportointikanta-taskdef-arn.outputs.taskdef-arn }} --query 'taskDefinition' > raportointikanta-task-definition.json

      - name: Render Amazon ECS task definition
        id: raportointikanta-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: raportointikanta-task-definition.json
          container-name: RaportointikantaContainer
          image: ${{ steps.login-ecr.outputs.registry }}/koski:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        id: raportointikanta-taskdef-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.raportointikanta-task-def.outputs.task-definition }}
          cluster: koski-cluster

      - name: Write task definition ARN to parameter store
        env:
          TASKDEF_ARN: ${{ steps.raportointikanta-taskdef-deploy.outputs.task-definition-arn }}
        run: aws ssm put-parameter --overwrite --name /koski/raportointikanta/task-definition --type String --value ${TASKDEF_ARN}

      - name: Report task ready
        uses: ravsamhq/notify-slack-action@v1
        if: always()
        with:
          status: ${{ job.status }}
          notification_title: 'Prod install {status_message}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
