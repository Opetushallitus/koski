name: Publish
on:
  workflow_call:
    inputs:
      commithash:
        description: "Commit hash (version) of the image to package and publish"
        type: string
        required: true
env:
  DOCKER_BUILDKIT: 1
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  publish:
    name: Publish Koski Docker image
    runs-on: ubuntu-20.04
    environment: dev
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commithash }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.ECR_ROLE }}
          role-duration-seconds: 3600
          role-session-name: KoskiPublishEcr-dev-${{ inputs.commithash }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ secrets.ECR_ACCOUNT_ID }}
          mask-password: "true"

      - name: Check if container image already exists in ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: koski
          IMAGE_TAG: ${{ inputs.commithash }}
        id: check-image
        run: |
          echo "image-exists=$(docker manifest inspect $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG > /dev/null 2>&1 ; echo $?)" >> $GITHUB_OUTPUT

      - name: Cache Maven packages
        uses: actions/cache@v3
        if: steps.check-image.outputs.image-exists != '0'
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Java 11
        uses: actions/setup-java@v4
        if: steps.check-image.outputs.image-exists != '0'
        with:
          java-version: "11"
          architecture: "x64"
          distribution: "zulu"
          cache: "maven"

      - name: Setup settings.xml
        uses: s4u/maven-settings-action@v2.8.0
        if: steps.check-image.outputs.image-exists != '0'
        with:
          servers: '[{"id": "github","configuration": {"httpHeaders": {"property": {"name": "Authorization","value": "Bearer ${{ secrets.GITHUB_TOKEN }}"}}}}]'

      - name: Restore target dir
        uses: actions/cache/restore@v4
        if: steps.check-image.outputs.image-exists != '0'
        with:
          path: "target/"
          key: ${{ runner.os }}-target-${{ inputs.commithash }}
          fail-on-cache-miss: "true"

      - name: Build application and publish it to Github Packages
        if: steps.check-image.outputs.image-exists != '0'
        env:
          version: ${{ inputs.commithash }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn versions:set -DnewVersion="$version"
          mvn war:war deploy:deploy --batch-mode -Dmaven.skip.install=true -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/Opetushallitus/koski

      - name: Build, tag, and push image to Amazon ECR
        if: steps.check-image.outputs.image-exists != '0'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: koski
          IMAGE_TAG: ${{ inputs.commithash }}
        run: |
          docker build -f docker-build/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg KOSKI_VERSION=$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
