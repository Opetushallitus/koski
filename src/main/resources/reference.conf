// Shared DB config for Slick, see http://slick.lightbend.com/doc/3.1.0/api/index.html#slick.jdbc.JdbcBackend$DatabaseFactoryDef@forConfig(String,Config,Driver,ClassLoader):Database
db = {
  host = "localhost"
  port = 5432
  user = "oph"
  password = "oph"
  schemaName = "public"
  numThreads = 20
  // maxConnections should equal numThreads: https://github.com/slick/slick/pull/1855/
  maxConnections = 20
  queueSize = 10000
  registerMbeans = true
  initializationFailFast = true
  driverClassName=org.postgresql.Driver
  // Properties to be passed to the PostgreSQL JDBC driver
  properties = {
    socketTimeout = 60
  }
}

// Database specific configs:
dbs = {
  koski = {
    schemaName = "oph"
    name = "koski"
    poolName = "koskiMasterPool"
  }

  replica = {
    schemaName = "oph"
    name = "koski"
    poolName = "koskiReplicaPool"
    readOnly = true
    properties = {
      socketTimeout = 120
    }
  }

  raportointi = {
    name = "raportointikanta"
    poolName = "koskiRaportointiPool"
    // maxConnections should equal numThreads: https://github.com/slick/slick/pull/1855/
    maxConnections = 5
    numThreads = 5
    properties = {
      socketTimeout = 900
    }
  }

  valpas {
    name = "valpas"
    poolName = "valpasDbPool"
  }
}

koodisto = {
  create = false
  update = false
}

localization = {
  create = true
  update = false
}

authentication-service.useCas=true

virta = {
  jarjestelma="KOSKI"
  tunnus="koski"
  avain="salaisuus"
}

healthcheck.oppija.oid = "1.2.246.562.24.00000000001"

sessionTimeoutMinutes=60

schedule {
  henkilötiedotUpdateInterval="1m"
  perustiedotSyncInterval="1s"
  tiedonsiirtoSyncInterval="1s"
}

koski.root.url="http://localhost:7021/koski"

koski.oppija.domain.fi="localhost"
koski.oppija.domain.sv=""
koski.cookieDomains=[${koski.oppija.domain.fi}]

acceptSyntheticHetus = false

elasticsearch = {
  host = "localhost"
  port = 9200
  protocol = "http"
}

features = {
  disabledPäätasonSuoritusTyypit = [
  ]
  disabledPäätasonSuoritusLuokat = [
  ]
  disabledOsasuoritusTyypit = [
  ]
}

suomi-fi-user-oid = "1.2.246.562.24.99999988889"

// These mock values need to be overridden. Otherwise mock data will be used.
virta.serviceUrl="mock"
virta.mockDataDir="src/main/resources/mockdata/virta"
#virta.serviceUrl="http://virtawstesti.csc.fi/luku/OpiskelijanTiedot"
eperusteet.baseUrl="https://eperusteet.opintopolku.fi"
eperusteet.url="mock"
opintopolku.virkailija.url="mock"
opintopolku.oppija.url="mock"
ytr.url = "mock"
ytr.aws.secretAccessKey = ""
ytr.aws.accessKeyId = ""
ytr.aws.externalId = ""
ytr.aws.bucket = "mock"
ytr.aws.roleArn = ""
prometheus.url="mock"
localization.url="mock"
identification.url.fi="/koski/login/oppija"
identification.url.sv=${identification.url.fi}
login.security="mock"
logout.url.fi=""
logout.url.sv=""
valpas = {
  rajapäivät {
    useMock = true
    lakiVoimassaVanhinSyntymäaika = "2004-01-01"
    lakiVoimassaPeruskoulustaValmistuneillaAlku = "2021-01-01"
    keväänValmistumisjaksoPituusPäivinä = 16
    ilmoitustenEnsimmäinenTallennuspäivä = "2021-08-01"
    keväänValmistumisjaksollaValmistuneidenViimeinenTarkastelupäivä = "0000-09-30"
    tulevaisuuteenMerkitynPerusopetuksenSuorituksenAikaikkunaPäivinä = 28
    kuntailmoitusAktiivisuusKuukausina = 2

    2021 {
      keväänValmistumisjaksoLoppu = "2021-05-31"
      keväänValmistumisjaksollaValmistuneidenOppivelvollisuudenSuorittamisenTarkistuspäivä = "2021-08-31"
    }
  }
}

#uncomment these to use oppija-raamit or virkailija-raamit in local development
#oppijaRaamitProxy="https://untuvaopintopolku.fi/oppija-raamit/"
#virkailijaRaamitProxy="https://virkailija.untuvaopintopolku.fi/virkailija-raamit/"

piwik.siteId = ""
env: "local"

configurable.logout.url.fi=""
configurable.logout.url.sv=""

mydata = {
  login {
    cas {
      fi = "/koski/login/oppija" # Login: "Korhopankki", or Tupas in production
      sv = ${mydata.login.cas.fi}
      targetparam = "?service=" # Parameter which defines where to redirect user after login.
    }
    servlet = "/koski/user/login" # This is where we land after cas login
  }
  members = [
    {
      id = "hsl" # Identify share in database ('asiakas' column)
      name = "HSL Helsingin Seudun Liikenne"
      purpose = "Tietoja käytetään opiskelijahintaisten matkalippujen myöntämiseen."
      membercodes = ["2769790-1"] # Identify API caller
      subsystemcodes = ["koski"] # Unused
    },
    {
      id = "frank"
      name = "Frank"
      purpose = ""
      membercodes = ["2769790-2"]
      subsystemcodes = ["koski"]
    },
  ]
  callbackURLs = [
    "^hslapp://.*"
    "^http://localhost.*"
    "^https://localhost.*"
    "^/.*"
  ]
}

raportit = {
  rajatut = []
}

# mock.casClient.usernameForAllVirkailijaTickets="tunnuksesi"

elaketurvakeskus = {
    kutsutSallittuOsoitteesta = ["127.0.0.1", "[0:0:0:0:0:0:0:1]"]
}
