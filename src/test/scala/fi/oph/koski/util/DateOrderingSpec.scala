package fi.oph.koski.util

import fi.oph.koski.TestEnvironment
import org.scalatest.freespec.AnyFreeSpec
import org.scalatest.matchers.should.Matchers

import java.time.LocalDate

class DateOrderingSpec extends AnyFreeSpec with TestEnvironment with Matchers {
  "LocalDate Option Ordering järjestää listan päivämääriä" in {
    val sorted = List(
      Some(LocalDate.of(2022, 3, 3)),
      Some(LocalDate.of(2021, 6, 11)),
      Some(LocalDate.of(2018, 11, 20)),
      Some(LocalDate.of(2018, 12, 3)),
      Some(LocalDate.of(2021, 3, 30)),
      Some(LocalDate.of(2021, 5, 3)),
      Some(LocalDate.of(2021, 4, 26)),
      Some(LocalDate.of(2021, 3, 10)),
      Some(LocalDate.of(2021, 4, 22)),
      Some(LocalDate.of(2020, 12, 2)),
      Some(LocalDate.of(2017, 1, 23)),
      Some(LocalDate.of(2019, 5, 27)),
      Some(LocalDate.of(2016, 12, 19)),
      Some(LocalDate.of(2017, 1, 20)),
      Some(LocalDate.of(2020, 4, 1)),
      Some(LocalDate.of(2020, 6, 3)),
      Some(LocalDate.of(2019, 9, 19)),
      Some(LocalDate.of(2020, 4, 1)),
      Some(LocalDate.of(2021, 2, 19)),
      Some(LocalDate.of(2021, 4, 7)),
      Some(LocalDate.of(2021, 8,31)),
      Some(LocalDate.of(2021, 3, 8)),
      Some(LocalDate.of(2017, 3, 3)),
      Some(LocalDate.of(2019, 10, 11)),
      Some(LocalDate.of(2020, 12, 21)),
      Some(LocalDate.of(2020, 10, 22)),
      Some(LocalDate.of(2017, 1, 23)),
      Some(LocalDate.of(2016, 10, 25)),
      Some(LocalDate.of(2020, 1, 30)),
      Some(LocalDate.of(2019, 6, 14)),
      Some(LocalDate.of(2018, 3, 4)),
      Some(LocalDate.of(2018, 11, 30)),
      Some(LocalDate.of(2020, 6, 16)),
      Some(LocalDate.of(2018, 5, 14)),
      Some(LocalDate.of(2019, 5, 27)),
      Some(LocalDate.of(2018, 6, 29)),
      Some(LocalDate.of(2017, 12, 16)),
      Some(LocalDate.of(2018, 6, 13)),
      Some(LocalDate.of(2022, 3, 3)),
      Some(LocalDate.of(2020, 8, 27)),
      Some(LocalDate.of(2018, 5, 22)),
      Some(LocalDate.of(2016, 12, 12)),
      Some(LocalDate.of(2017, 8, 9)),
      Some(LocalDate.of(2017, 3, 3))
    ).sorted(DateOrdering.localDateOptionOrdering)

    sorted shouldBe List(
      Some(LocalDate.parse("2016-10-25")),
      Some(LocalDate.parse("2016-12-12")),
      Some(LocalDate.parse("2016-12-19")),
      Some(LocalDate.parse("2017-01-20")),
      Some(LocalDate.parse("2017-01-23")),
      Some(LocalDate.parse("2017-01-23")),
      Some(LocalDate.parse("2017-03-03")),
      Some(LocalDate.parse("2017-03-03")),
      Some(LocalDate.parse("2017-08-09")),
      Some(LocalDate.parse("2017-12-16")),
      Some(LocalDate.parse("2018-03-04")),
      Some(LocalDate.parse("2018-05-14")),
      Some(LocalDate.parse("2018-05-22")),
      Some(LocalDate.parse("2018-06-13")),
      Some(LocalDate.parse("2018-06-29")),
      Some(LocalDate.parse("2018-11-20")),
      Some(LocalDate.parse("2018-11-30")),
      Some(LocalDate.parse("2018-12-03")),
      Some(LocalDate.parse("2019-05-27")),
      Some(LocalDate.parse("2019-05-27")),
      Some(LocalDate.parse("2019-06-14")),
      Some(LocalDate.parse("2019-09-19")),
      Some(LocalDate.parse("2019-10-11")),
      Some(LocalDate.parse("2020-01-30")),
      Some(LocalDate.parse("2020-04-01")),
      Some(LocalDate.parse("2020-04-01")),
      Some(LocalDate.parse("2020-06-03")),
      Some(LocalDate.parse("2020-06-16")),
      Some(LocalDate.parse("2020-08-27")),
      Some(LocalDate.parse("2020-10-22")),
      Some(LocalDate.parse("2020-12-02")),
      Some(LocalDate.parse("2020-12-21")),
      Some(LocalDate.parse("2021-02-19")),
      Some(LocalDate.parse("2021-03-08")),
      Some(LocalDate.parse("2021-03-10")),
      Some(LocalDate.parse("2021-03-30")),
      Some(LocalDate.parse("2021-04-07")),
      Some(LocalDate.parse("2021-04-22")),
      Some(LocalDate.parse("2021-04-26")),
      Some(LocalDate.parse("2021-05-03")),
      Some(LocalDate.parse("2021-06-11")),
      Some(LocalDate.parse("2021-08-31")),
      Some(LocalDate.parse("2022-03-03")),
      Some(LocalDate.parse("2022-03-03"))
    )
  }
}
